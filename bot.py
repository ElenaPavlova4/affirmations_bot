import json
import logging
from datetime import datetime, time, timezone
from pathlib import Path
from zoneinfo import ZoneInfo

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    CallbackQueryHandler, MessageHandler, ContextTypes, filters, AIORateLimiter
)

BOT_TOKEN = "8368966703:AAH6ITzlxfryVXPcLDRAHiSXHIeSixquToc"  # ‚Üê —Ç–≤–æ–π —Ç–æ–∫–µ–Ω
DEFAULT_TZ = "Europe/Kyiv"
DEFAULT_TIME = "09:00"
USERS_FILE = Path("users.json")

AFFIRMATIONS = [
    "–Ø –≤—ã–±–∏—Ä–∞—é –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä—ë–¥ ‚Äî —Å–ø–æ–∫–æ–π–Ω–æ, —É–≤–µ—Ä–µ–Ω–Ω–æ, —É–º–Ω–æ.",
    "–ú–æ–∏ —Ä–µ—à–µ–Ω–∏—è —Ç–æ—á–Ω—ã, –∞ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏–Ω–æ—Å—è—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.",
    "–°–µ–≥–æ–¥–Ω—è —è —Å–æ–∑–¥–∞—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –∏ –ø–æ–ª—É—á–∞—é –±–æ–ª—å—à–µ, —á–µ–º –≤—á–µ—Ä–∞.",
    "–Ø –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∏—Ä–æ–≤–∞–Ω(–∞), —Å–º–µ–ª–∞ –∏ –¥–æ–±–∏–≤–∞—é—Å—å —Å–≤–æ–µ–≥–æ.",
    "–ú–æ–π —Ä–∞–∑—É–º —è—Å–µ–Ω, —ç–Ω–µ—Ä–≥–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞, —Ü–µ–ª–∏ –¥–æ—Å—Ç–∏–∂–∏–º—ã.",
    "–ö–∞–∂–¥—ã–π —à–∞–≥ —É—Å–∏–ª–∏–≤–∞–µ—Ç –º–æ—é —Ä–µ–ø—É—Ç–∞—Ü–∏—é –∏ –∫–∞–ø–∏—Ç–∞–ª.",
    "–Ø –¥–µ–π—Å—Ç–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ ‚Äî –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —à—É–º–∞.",
    "–Ø —É—á—É—Å—å –±—ã—Å—Ç—Ä–µ–µ, —Ä–∞–±–æ—Ç–∞—é —É–º–Ω–µ–µ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é –±–æ–ª—å—à–µ.",
    "–Ø –ª—é–±–ª—é –¥–µ–Ω—å–≥–∏, –∏ –¥–µ–Ω—å–≥–∏ –ª—é–±—è—Ç –º–µ–Ω—è.",
    "–Ø –æ—Ç–ª–∏—á–Ω–æ –∑–Ω–∞—é, –∫–∞–∫ –º–Ω–µ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–Ω—å–≥–∏.",
    "–Ø –ø–æ–ª—É—á–∞—é –æ—Ç –í—Å–µ–ª–µ–Ω–Ω–æ–π –≤—Å–µ, —á—Ç–æ –º–Ω–µ –Ω—É–∂–Ω–æ.",
    "–ú–æ–π –¥–æ—Ö–æ–¥ —Å –∫–∞–∂–¥—ã–º –¥–Ω–µ–º —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –≤—Å–µ –±–æ–ª—å—à–µ –∏ –±–æ–ª—å—à–µ.",
    "–ú–æ—è —Ä–∞–±–æ—Ç–∞ –ø—Ä–∏–Ω–æ—Å–∏—Ç –ø–æ–ª—å–∑—É –¥–ª—è –º–æ–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.",
    "–Ø –Ω–∞—Å—Ç—Ä–æ–µ–Ω(–∞) –Ω–∞ —á–∞—Å—Ç–æ—Ç—É –±–æ–≥–∞—Ç—Å—Ç–≤–∞ –í—Å–µ–ª–µ–Ω–Ω–æ–π.",
    "–Ø –≤–æ –≤—Å–µ–º –≤–∏–∂—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –¥–µ–Ω–µ–≥",
    "–Ø –ø—Ä–∏—Ç—è–≥–∏–≤–∞—é –≤ —Å–≤–æ—é –∂–∏–∑–Ω—å —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤—ã—Ö, –ø–æ—Ä—è–¥–æ—á–Ω—ã—Ö, —Ç—Ä—É–¥–æ–ª—é–±–∏–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.",
    "–£ –º–µ–Ω—è –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å –æ–≥—Ä–æ–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–¥–µ–π –∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–Ω–µ–≥.",
    "–Ø –≤—Å–µ–≥–¥–∞ –∏–º–µ—é —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥, —Å–∫–æ–ª—å–∫–æ –º–Ω–µ –Ω—É–∂–Ω–æ.",
    "–õ—é–±—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –Ω–µ–ø—Ä–∏—è—Ç–Ω–æ—Å—Ç–∏ —è –ø—Ä–µ–≤—Ä–∞—â–∞—é –≤ –¥–µ–Ω—å–≥–∏.",
    "–ú–æ–∏ –¥–æ—Ö–æ–¥—ã —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç—Å—è —Å –∫–∞–∂–¥—ã–º –¥–Ω–µ–º.",
    "–Ø –ø—Ä–∏–≤–ª–µ–∫–∞—é –±–æ–≥–∞—Ç—Å—Ç–≤–æ –∏ –∏–∑–æ–±–∏–ª–∏–µ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ –≤–∏–¥–µ —Ä–∞–∑–Ω—ã—Ö –≤–∞–ª—é—Ç, —á–µ–∫–æ–≤, –ø–æ–¥–∞—Ä–∫–æ–≤, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.",
    "–Ø –ø—Ä–∏–≤–ª–µ–∫–∞—é –¥–µ–Ω—å–≥–∏ –∏ –±–æ–≥–∞—Ç—Å—Ç–≤–æ —Å –ª—é–±–æ–≤—å—é –∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å—é.",
    "–Ø —Ä–∞–¥—É—é—Å—å –±–æ–ª—å—à–∏–º –∏ –º–∞–ª–µ–Ω—å–∫–∏–º —É—Å–ø–µ—Ö–∞–º.",
    "–Ø –±–ª–∞–≥–æ–¥–∞—Ä—é –í—Å–µ–ª–µ–Ω–Ω—É—é –∑–∞ –≤—Å–µ, —á—Ç–æ –æ–Ω–∞ –¥–∞–µ—Ç –º–Ω–µ",
    "–Ø –≤—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞—é —Ç–æ, —á—Ç–æ –º–Ω–µ –Ω—É–∂–Ω–æ, –≤–æ–≤—Ä–µ–º—è –∏ –≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ.",
    "–î–µ–Ω—å–≥–∏ –¥–∞—é—Ç –º–Ω–µ —Å–≤–æ–±–æ–¥—É –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –º–æ–∏—Ö –ø–ª–∞–Ω–æ–≤ –∏ –∂–µ–ª–∞–Ω–∏–π.",
    "–î–µ–Ω—å–≥–∏ –º–µ–Ω—è –ª—é–±—è—Ç. –Ø –¥–æ—Å—Ç–æ–∏–Ω –±–æ–ª—å—à–∏—Ö –¥–µ–Ω–µ–≥.",
    "–Ø –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç–∏–≥–∞—é —Ç–æ–≥–æ, —á–µ–≥–æ —Ö–æ—á—É.",
    "–î–µ–Ω—å–≥–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –∫–æ –º–Ω–µ –ª–µ–≥–∫–æ –∏ —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º.",
    "–ß–µ–º –±–æ–ª—å—à–µ –¥–µ–Ω–µ–≥ —è —Ç—Ä–∞—á—É, —Ç–µ–º –±–æ–ª—å—à–µ –∫–æ –º–Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç.",
    "–Ø ‚Äî –º–∞–≥–Ω–∏—Ç –¥–ª—è –¥–µ–Ω–µ–≥ –∏ –±–æ–≥–∞—Ç—Å—Ç–≤–∞.",
    "–° –∫–∞–∂–¥—ã–º –¥–Ω–µ–º –º–æ–∏ –¥–æ—Ö–æ–¥—ã —Ä–∞—Å—Ç—É—Ç.",
    "–Ø –≤—ã–±–∏—Ä–∞—é –º—ã—Å–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–ª–∞—é—Ç –º–µ–Ω—è –±–æ–≥–∞—á–µ –∏ —Å—á–∞—Å—Ç–ª–∏–≤–µ–µ.",
    "–Ø –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Å–æ–±–µ–Ω–Ω–∞—è.",
    "–Ø —Ä–æ–∂–¥–µ–Ω–∞, —á—Ç–æ–±—ã –ª—é–±–∏—Ç—å –∏ –±—ã—Ç—å –ª—é–±–∏–º–æ–π.",
    "–í—Å–µ –º–æ–∏ —Å–≤–∏–¥–∞–Ω–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –Ω–µ–∑–∞–±—ã–≤–∞–µ–º–æ.",
    "–Ø –¥–æ—Å—Ç–æ–∏–Ω/–¥–æ—Å—Ç–æ–π–Ω–∞ –Ω–∞—Å—Ç–æ—è—â–µ–π –ª—é–±–≤–∏.",
    "–Ø –∑–∞—Å–ª—É–∂–∏–≤–∞—é –ª—é–±–≤–∏.",
    "–Ø –æ—Ç–ø—É—Å–∫–∞—é —Å–≤–æ–π —Å—Ç—Ä–∞—Ö –ª—é–±–≤–∏.",
    "–Ø –ª–µ–≥–∫–æ –∑–Ω–∞–∫–æ–º–ª—é—Å—å —Å –ª—é–¥—å–º–∏.",
    "–Ø –Ω—Ä–∞–≤–ª—é—Å—å —Ç–µ–º, –∫—Ç–æ –Ω—Ä–∞–≤–∏—Ç—Å—è –º–Ω–µ.",
    "–õ—é–±–æ–≤—å —Ç—è–Ω–µ—Ç—Å—è –∫–æ –º–Ω–µ.",
    "–ú–æ—è –ª—é–±–æ–≤—å –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–æ –º–Ω–µ –≤ —Å–∞–º–æ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞—Å –æ–±–æ–∏—Ö.",
    "–ú–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä –∏—â–µ—Ç –º–µ–Ω—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, –∏ –º—ã –Ω–∞—Ö–æ–¥–∏–º –¥—Ä—É–≥ –¥—Ä—É–≥–∞.",
    "–£ –í—Å–µ–ª–µ–Ω–Ω–æ–π –¥–ª—è –º–µ–Ω—è –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –Ω–µ—á—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ ‚Äì —Ç–∞–∫–æ–µ, –æ —á–µ–º —è –Ω–µ –º–æ–≥(–ª–∞) –∏ –ø–æ–¥—É–º–∞—Ç—å.",
    "–Ø –¥–æ—Å—Ç–æ–π–Ω–∞ –±–µ–∑—É—Å–ª–æ–≤–Ω–æ–π –ª—é–±–≤–∏ –∏ –¥–æ–±—Ä–æ—Ç—ã.",
    "–Ø –æ—Å–æ–∑–Ω–∞—é —Å–µ–±–µ —Ü–µ–Ω—É.",
    "–Ø –¥–æ—Å—Ç–æ–∏–Ω/–¥–æ—Å—Ç–æ–π–Ω–∞ —Ç–æ–≥–æ, —á—Ç–æ–±—ã –º–µ–Ω—è –ª—é–±–∏–ª–∏ –≤—Å–µ–º —Å–µ—Ä–¥—Ü–µ–º.",
    "–Ø –ø–æ–∑–≤–æ–ª—è—é –ª—é–±–≤–∏ –≤–æ–π—Ç–∏ –≤ –º–æ—é –∂–∏–∑–Ω—å.",
]

def load_users():
    if USERS_FILE.exists():
        return json.loads(USERS_FILE.read_text(encoding="utf-8"))
    return {}

def save_users(data):
    USERS_FILE.write_text(json.dumps(data, ensure_ascii=False, indent=2), encoding="utf-8")

def stable_daily_index(chat_id: int, date_utc: datetime) -> int:
    seed = hash((chat_id, date_utc.date().toordinal()))
    return abs(seed) % len(AFFIRMATIONS)

def normalize_time_str(text: str) -> str | None:
    try:
        hh, mm = text.strip().split(":")
        h, m = int(hh), int(mm)
        if 0 <= h < 24 and 0 <= m < 60:
            return f"{h:02d}:{m:02d}"
    except Exception:
        pass
    return None

def keyboard_main(time_str: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—é —Å–µ–π—á–∞—Å üîÆ", callback_data="now")],
        [InlineKeyboardButton(f"–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è ‚è∞ ({time_str})", callback_data="change_time")],
    ])

async def send_today_affirmation(chat_id: int, ctx: ContextTypes.DEFAULT_TYPE, force_random=False):
    if force_random:
        idx = abs(hash((chat_id, int(datetime.now(timezone.utc).timestamp())))) % len(AFFIRMATIONS)
    else:
        idx = stable_daily_index(chat_id, datetime.now(timezone.utc))
    text = AFFIRMATIONS[idx]
    await ctx.bot.send_message(chat_id, f"‚ú® <b>–ê—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—è</b>\n\n{text}", parse_mode=ParseMode.HTML)

async def daily_job(ctx: ContextTypes.DEFAULT_TYPE):
    await send_today_affirmation(ctx.job.chat_id, ctx)

def schedule(app, chat_id: int, time_str: str, tz: str):
    for j in app.job_queue.get_jobs_by_name(f"daily_{chat_id}"):
        j.schedule_removal()
    hh, mm = map(int, time_str.split(":"))
    app.job_queue.run_daily(
        daily_job,
        time(hour=hh, minute=mm, tzinfo=ZoneInfo(tz)),
        days=(0,1,2,3,4,5,6),
        chat_id=chat_id,
        name=f"daily_{chat_id}",
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    data = load_users()
    user = data.get(str(chat_id)) or {"time": DEFAULT_TIME, "tz": DEFAULT_TZ}
    data[str(chat_id)] = user
    save_users(data)
    schedule(context.application, chat_id, user["time"], user["tz"])
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.\n"
        f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {user['time']} ({user['tz']}).\n"
        "–ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å: /settime HH:MM –∏ /settz Europe/Kyiv",
        reply_markup=keyboard_main(user["time"])
    )

async def today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_today_affirmation(update.effective_chat.id, context)

async def random(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_today_affirmation(update.effective_chat.id, context, force_random=True)

async def settime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /settime HH:MM")
        return
    t = normalize_time_str(context.args[0])
    if not t:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 09:00")
        return
    data = load_users()
    user = data.get(str(chat_id)) or {"time": DEFAULT_TIME, "tz": DEFAULT_TZ}
    user["time"] = t
    data[str(chat_id)] = user
    save_users(data)
    schedule(context.application, chat_id, user["time"], user["tz"])
    await update.message.reply_text(f"–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤ {t} ({user['tz']}).")

async def settz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /settz Europe/Kyiv")
        return
    tz = context.args[0]
    try:
        ZoneInfo(tz)
    except Exception:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–∞–π–º–∑–æ–Ω–∞. –ü—Ä–∏–º–µ—Ä: Europe/Kyiv")
        return
    data = load_users()
    user = data.get(str(chat_id)) or {"time": DEFAULT_TIME, "tz": DEFAULT_TZ}
    user["tz"] = tz
    data[str(chat_id)] = user
    save_users(data)
    schedule(context.application, chat_id, user["time"], user["tz"])
    await update.message.reply_text(f"–¢–∞–π–º–∑–æ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞: {tz}")

async def buttons_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    chat_id = q.message.chat.id
    if q.data == "now":
        await send_today_affirmation(chat_id, context)
    elif q.data == "change_time":
        await q.message.reply_text("–ù–∞–ø–∏—à–∏: /settime HH:MM")

def main():
    logging.basicConfig(level=logging.INFO)
    if not BOT_TOKEN:
        raise RuntimeError("–ù–µ—Ç BOT_TOKEN! –£–∫–∞–∂–∏ —Ç–æ–∫–µ–Ω.")
    app = ApplicationBuilder().token(BOT_TOKEN).rate_limiter(AIORateLimiter()).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("today", today))
    app.add_handler(CommandHandler("random", random))
    app.add_handler(CommandHandler("settime", settime))
    app.add_handler(CommandHandler("settz", settz))
    app.add_handler(CallbackQueryHandler(buttons_cb))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, today))
    data = load_users()
    for cid, u in data.items():
        try:
            schedule(app, int(cid), u.get("time", DEFAULT_TIME), u.get("tz", DEFAULT_TZ))
        except Exception:
            pass
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
